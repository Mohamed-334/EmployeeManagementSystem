// <auto-generated />
using System;
using EmployeeManagementDatabase.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EmployeeManagementDB.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250127193455_AddNotificationSeenAndUserNotificationSeenTables")]
    partial class AddNotificationSeenAndUserNotificationSeenTables
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EmployeeManagementDB.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnType("Date");

                    b.Property<string>("NotificationMessage")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("VarChar");

                    b.HasKey("NotificationId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("EmployeeManagementDB.Entities.NotificationSeen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<bool>("Seen")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("NotificationSeen", (string)null);
                });

            modelBuilder.Entity("EmployeeManagementDB.Entities.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("PositionName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.ToTable("position", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartmentId = 2,
                            PositionName = "DotNet Developer"
                        },
                        new
                        {
                            Id = 2,
                            DepartmentId = 7,
                            PositionName = "PM Back-end"
                        },
                        new
                        {
                            Id = 3,
                            DepartmentId = 2,
                            PositionName = "Laravel Developer"
                        },
                        new
                        {
                            Id = 4,
                            DepartmentId = 4,
                            PositionName = "React Developer"
                        },
                        new
                        {
                            Id = 5,
                            DepartmentId = 4,
                            PositionName = "Angular Developer"
                        },
                        new
                        {
                            Id = 6,
                            DepartmentId = 7,
                            PositionName = "PM Front-end "
                        },
                        new
                        {
                            Id = 7,
                            DepartmentId = 6,
                            PositionName = "Admin"
                        });
                });

            modelBuilder.Entity("EmployeeManagementDB.Entities.UserNotificationSeen", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("NotificationsSeenId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "NotificationId");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("NotificationsSeenId");

                    b.ToTable("UserNotificationSeen", (string)null);
                });

            modelBuilder.Entity("EmployeeManagementDatabase.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("Varchar");

                    b.HasKey("Id");

                    b.ToTable("Department", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 2,
                            DepartmentName = "Back-end"
                        },
                        new
                        {
                            Id = 4,
                            DepartmentName = "Front-end"
                        },
                        new
                        {
                            Id = 6,
                            DepartmentName = "Adminstration"
                        },
                        new
                        {
                            Id = 7,
                            DepartmentName = "Tech Management"
                        },
                        new
                        {
                            Id = 8,
                            DepartmentName = "Finans Management"
                        });
                });

            modelBuilder.Entity("EmployeeManagementDatabase.Entities.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("VarChar");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("VarChar");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ManagerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.Property<byte[]>("ProfilePhoto")
                        .HasColumnType("Image");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PositionId");

                    b.ToTable("Employee", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            Address = "Assuit",
                            ConcurrencyStamp = "4a74cf62-4114-47b3-9419-a0ee2f09786c",
                            Email = "mohamedaboelez334@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Mohamed",
                            LastName = "Ibrahim",
                            LockoutEnabled = false,
                            PasswordHash = "EntaMalOmk.1516",
                            PhoneNumber = "01068706845",
                            PhoneNumberConfirmed = false,
                            PositionId = 1,
                            SecurityStamp = "2a058dcc-a5f7-4c53-a79e-706ca06295b0",
                            TwoFactorEnabled = false,
                            UserName = "MohamedIbrahim"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            Address = "Sharm AlSheikh",
                            ConcurrencyStamp = "75218dc1-bc12-458d-aae5-7a78d82e3716",
                            Email = "Youssef1234.com",
                            EmailConfirmed = false,
                            FirstName = "Youssef",
                            LastName = "Ibrahim",
                            LockoutEnabled = false,
                            PasswordHash = "EntaMalOmkTany.1516",
                            PhoneNumber = "01049834561",
                            PhoneNumberConfirmed = false,
                            PositionId = 2,
                            SecurityStamp = "b82b64e4-7dd0-4739-b2e5-908c0b2d0ca2",
                            TwoFactorEnabled = false,
                            UserName = "YoussefIbrahim"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            Address = "Cairo",
                            ConcurrencyStamp = "7b67265b-05d4-4fd4-8f1d-d0882d98d074",
                            Email = "Khaled333@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Khaled",
                            LastName = "Alaa",
                            LockoutEnabled = false,
                            PasswordHash = "EntaMalOmkTalet.1516",
                            PhoneNumber = "0118735194",
                            PhoneNumberConfirmed = false,
                            PositionId = 3,
                            SecurityStamp = "50a94860-6168-40ce-b414-d21a6f4c7467",
                            TwoFactorEnabled = false,
                            UserName = "KhaledAlaa"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            Address = "New Capital",
                            ConcurrencyStamp = "39d11923-3cad-4242-8641-a58fd17f7cf8",
                            Email = "AnasMohamed784.com",
                            EmailConfirmed = false,
                            FirstName = "Anas",
                            LastName = "Mohamed",
                            LockoutEnabled = false,
                            PasswordHash = "EntaMalOmk4.1516",
                            PhoneNumber = "01249834561",
                            PhoneNumberConfirmed = false,
                            PositionId = 4,
                            SecurityStamp = "b7ec0dd3-40dd-422d-a363-1ec2f8645058",
                            TwoFactorEnabled = false,
                            UserName = "AnasMohamed"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            Address = "Alex",
                            ConcurrencyStamp = "a554189a-a947-46f7-8607-e9ec315c647c",
                            Email = "KhaledAhmed@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Khaled",
                            LastName = "Ahmed",
                            LockoutEnabled = false,
                            PasswordHash = "EntaMalOmk5.1516",
                            PhoneNumber = "01532943571",
                            PhoneNumberConfirmed = false,
                            PositionId = 5,
                            SecurityStamp = "ce17855c-b078-4f99-80a5-8603bc14115e",
                            TwoFactorEnabled = false,
                            UserName = "KhaledAhmed"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            Address = "Kafr Alsheikh",
                            ConcurrencyStamp = "496b5616-2ace-4ed1-84f0-7e657f1de29c",
                            Email = "Alaa841.com",
                            EmailConfirmed = false,
                            FirstName = "Alaa",
                            LastName = "Osama",
                            LockoutEnabled = false,
                            PasswordHash = "EntaMalOmkTany.1516",
                            PhoneNumber = "0107835641",
                            PhoneNumberConfirmed = false,
                            PositionId = 6,
                            SecurityStamp = "3f676331-0cef-439c-ab5c-10b9cb15b9da",
                            TwoFactorEnabled = false,
                            UserName = "AlaaOsama"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            Address = "Alex",
                            ConcurrencyStamp = "06f2b7db-c989-4868-ac68-a966cbe9783b",
                            Email = "Admin1@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "1",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN1",
                            PasswordHash = "AQAAAAEAACcQAAAAENRk/0rWj9s9DDgr3hBGlpYR1MG2yXRFRtxLnu3B8Oh4sNCuukNQ9+wp5e7KseC8eA==",
                            PhoneNumber = "01068873164",
                            PhoneNumberConfirmed = false,
                            PositionId = 7,
                            SecurityStamp = "de74201d-c2c1-4940-b2d1-ce70391c466f",
                            TwoFactorEnabled = false,
                            UserName = "Admin1"
                        });
                });

            modelBuilder.Entity("EmployeeManagementDatabase.Entities.EmployeeAttendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("date");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasMaxLength(10)
                        .HasColumnType("varchar");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("Time");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("Time");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Attendance", (string)null);
                });

            modelBuilder.Entity("EmployeeManagementDatabase.Entities.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DeadLine")
                        .HasColumnType("Date");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Job", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 6,
                            DeadLine = new DateTime(2025, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = "4",
                            State = "Running",
                            TaskDescription = "Create Login Page For the Employee System",
                            TaskName = "LoginPage"
                        },
                        new
                        {
                            Id = 7,
                            DeadLine = new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = "5",
                            State = "Running",
                            TaskDescription = "Create Page that Hold Related Cars Photos",
                            TaskName = "Photo Package Page"
                        },
                        new
                        {
                            Id = 8,
                            DeadLine = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = "4",
                            State = "Running",
                            TaskDescription = "Create Register Page For the Employee System",
                            TaskName = "Register Page"
                        },
                        new
                        {
                            Id = 9,
                            DeadLine = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = "2",
                            State = "Running",
                            TaskDescription = "Create back-end Login Page For the Employee System",
                            TaskName = " Back-end Login Page"
                        },
                        new
                        {
                            Id = 10,
                            DeadLine = new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = "1",
                            State = "Running",
                            TaskDescription = "Create Back-end Register Page For the Employee System",
                            TaskName = "Back-end Register Page"
                        });
                });

            modelBuilder.Entity("EmployeeManagementDatabase.Entities.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FromEmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReportBody")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("Varchar")
                        .HasColumnName("Body");

                    b.Property<string>("ReportHeader")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("Varchar")
                        .HasColumnName("Header");

                    b.Property<string>("ReportType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SendAt")
                        .HasColumnType("Date");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int");

                    b.Property<string>("ToEmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FromEmployeeId");

                    b.HasIndex("TaskId");

                    b.HasIndex("ToEmployeeId");

                    b.ToTable("Report", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FromEmployeeId = "7",
                            ReportBody = "Login Page has Been Completed",
                            ReportHeader = "Login Page",
                            ReportType = "DeliverTask",
                            SendAt = new DateTime(2024, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ToEmployeeId = "3"
                        },
                        new
                        {
                            Id = 2,
                            FromEmployeeId = "7",
                            ReportBody = " Back-end Login Page has Been Completed",
                            ReportHeader = "Back-end Login Page",
                            ReportType = "DeliverTask",
                            SendAt = new DateTime(2024, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ToEmployeeId = "3"
                        });
                });

            modelBuilder.Entity("EmployeeManagementDatabase.Entities.Vacation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("At")
                        .HasColumnType("Date");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VacationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Vacation", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "7",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EmployeeManagementDB.Entities.Notification", b =>
                {
                    b.HasOne("EmployeeManagementDatabase.Entities.Employee", "Employee")
                        .WithMany("Notifications")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("EmployeeManagementDB.Entities.Position", b =>
                {
                    b.HasOne("EmployeeManagementDatabase.Entities.Department", "Department")
                        .WithMany("Positions")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Department");
                });

            modelBuilder.Entity("EmployeeManagementDB.Entities.UserNotificationSeen", b =>
                {
                    b.HasOne("EmployeeManagementDatabase.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmployeeManagementDB.Entities.NotificationSeen", null)
                        .WithMany()
                        .HasForeignKey("NotificationsSeenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmployeeManagementDatabase.Entities.Employee", b =>
                {
                    b.HasOne("EmployeeManagementDatabase.Entities.Employee", "Manager")
                        .WithMany("EmployeesOfManager")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("EmployeeManagementDB.Entities.Position", "Position")
                        .WithMany("Employees")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Manager");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("EmployeeManagementDatabase.Entities.EmployeeAttendance", b =>
                {
                    b.HasOne("EmployeeManagementDatabase.Entities.Employee", "Employee")
                        .WithMany("Attendances")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("EmployeeManagementDatabase.Entities.Job", b =>
                {
                    b.HasOne("EmployeeManagementDatabase.Entities.Employee", "Employee")
                        .WithMany("Tasks")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("EmployeeManagementDatabase.Entities.Report", b =>
                {
                    b.HasOne("EmployeeManagementDatabase.Entities.Employee", "FromEmployee")
                        .WithMany("FromReports")
                        .HasForeignKey("FromEmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EmployeeManagementDatabase.Entities.Job", "Job")
                        .WithMany("Reports")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EmployeeManagementDatabase.Entities.Employee", "ToEmployee")
                        .WithMany("ToReports")
                        .HasForeignKey("ToEmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("FromEmployee");

                    b.Navigation("Job");

                    b.Navigation("ToEmployee");
                });

            modelBuilder.Entity("EmployeeManagementDatabase.Entities.Vacation", b =>
                {
                    b.HasOne("EmployeeManagementDatabase.Entities.Employee", "Employee")
                        .WithMany("Vacations")
                        .HasForeignKey("EmployeeId");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EmployeeManagementDatabase.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EmployeeManagementDatabase.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmployeeManagementDatabase.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EmployeeManagementDatabase.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmployeeManagementDB.Entities.Position", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("EmployeeManagementDatabase.Entities.Department", b =>
                {
                    b.Navigation("Positions");
                });

            modelBuilder.Entity("EmployeeManagementDatabase.Entities.Employee", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("EmployeesOfManager");

                    b.Navigation("FromReports");

                    b.Navigation("Notifications");

                    b.Navigation("Tasks");

                    b.Navigation("ToReports");

                    b.Navigation("Vacations");
                });

            modelBuilder.Entity("EmployeeManagementDatabase.Entities.Job", b =>
                {
                    b.Navigation("Reports");
                });
#pragma warning restore 612, 618
        }
    }
}
