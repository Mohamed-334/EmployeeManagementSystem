// <auto-generated />
using System;
using EmployeeManagementDatabase.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EmployeeManagementDB.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20250203220905_AddTaskLink2")]
    partial class AddTaskLink2
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.12")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EmployeeManagementDB.Entities.EmployeeAttendance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Date")
                        .HasColumnType("Date");

                    b.Property<string>("Day")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<TimeSpan>("EndTime")
                        .HasColumnType("time");

                    b.Property<TimeSpan>("StartTime")
                        .HasColumnType("time");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Attendance", (string)null);
                });

            modelBuilder.Entity("EmployeeManagementDB.Entities.MailSeen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("MailId")
                        .HasColumnType("int");

                    b.Property<bool>("Seen")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("MailId");

                    b.ToTable("MailSeen", (string)null);
                });

            modelBuilder.Entity("EmployeeManagementDB.Entities.Notification", b =>
                {
                    b.Property<int>("NotificationId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NotificationId"));

                    b.Property<DateTime>("NotificationDate")
                        .HasColumnType("Date");

                    b.Property<string>("NotificationMessage")
                        .IsRequired()
                        .HasColumnType("VarChar(Max)");

                    b.HasKey("NotificationId");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("EmployeeManagementDB.Entities.NotificationSeen", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("NotificationId")
                        .HasColumnType("int");

                    b.Property<bool>("Seen")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.HasIndex("NotificationId");

                    b.ToTable("NotificationSeen", (string)null);
                });

            modelBuilder.Entity("EmployeeManagementDB.Entities.Position", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("DepartmentId")
                        .HasColumnType("int");

                    b.Property<string>("PositionName")
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("PositionName")
                        .IsUnique()
                        .HasFilter("[PositionName] IS NOT NULL");

                    b.ToTable("position", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DepartmentId = 2,
                            PositionName = "DotNet Developer"
                        },
                        new
                        {
                            Id = 2,
                            DepartmentId = 7,
                            PositionName = "PM Back-end"
                        },
                        new
                        {
                            Id = 3,
                            DepartmentId = 2,
                            PositionName = "Laravel Developer"
                        },
                        new
                        {
                            Id = 4,
                            DepartmentId = 4,
                            PositionName = "React Developer"
                        },
                        new
                        {
                            Id = 5,
                            DepartmentId = 4,
                            PositionName = "Angular Developer"
                        },
                        new
                        {
                            Id = 6,
                            DepartmentId = 7,
                            PositionName = "PM Front-end "
                        },
                        new
                        {
                            Id = 7,
                            DepartmentId = 6,
                            PositionName = "Admin"
                        });
                });

            modelBuilder.Entity("EmployeeManagementDB.Entities.Vacation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("At")
                        .HasColumnType("Date");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("VacationType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Vacation", (string)null);
                });

            modelBuilder.Entity("EmployeeManagementDatabase.Entities.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DepartmentName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("Varchar");

                    b.Property<string>("DepartmentPresident")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("DepartmentName")
                        .IsUnique();

                    b.HasIndex("DepartmentPresident")
                        .IsUnique()
                        .HasFilter("[DepartmentPresident] IS NOT NULL");

                    b.ToTable("Department", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 2,
                            DepartmentName = "Back-end"
                        },
                        new
                        {
                            Id = 4,
                            DepartmentName = "Front-end"
                        },
                        new
                        {
                            Id = 6,
                            DepartmentName = "Adminstration"
                        },
                        new
                        {
                            Id = 7,
                            DepartmentName = "Tech Management"
                        },
                        new
                        {
                            Id = 8,
                            DepartmentName = "Finans Management"
                        });
                });

            modelBuilder.Entity("EmployeeManagementDatabase.Entities.Employee", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("VarChar");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("VarChar");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("ManagerId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<int?>("PositionId")
                        .HasColumnType("int");

                    b.Property<byte[]>("ProfilePhoto")
                        .HasColumnType("Image");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("ManagerId");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("PositionId");

                    b.ToTable("Employee", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            AccessFailedCount = 0,
                            Address = "Assuit",
                            ConcurrencyStamp = "d0e605f8-b2ea-459a-b6b2-364c850117d0",
                            Email = "mohamedaboelez334@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Mohamed",
                            LastName = "Ibrahim",
                            LockoutEnabled = false,
                            PasswordHash = "EntaMalOmk.1516",
                            PhoneNumber = "01068706845",
                            PhoneNumberConfirmed = false,
                            PositionId = 1,
                            SecurityStamp = "3a96d0e3-d683-4f42-9c0b-431a572a2556",
                            TwoFactorEnabled = false,
                            UserName = "MohamedIbrahim"
                        },
                        new
                        {
                            Id = "2",
                            AccessFailedCount = 0,
                            Address = "Sharm AlSheikh",
                            ConcurrencyStamp = "f65cdad2-d0c5-4682-84b8-47120a110602",
                            Email = "Youssef1234.com",
                            EmailConfirmed = false,
                            FirstName = "Youssef",
                            LastName = "Ibrahim",
                            LockoutEnabled = false,
                            PasswordHash = "EntaMalOmkTany.1516",
                            PhoneNumber = "01049834561",
                            PhoneNumberConfirmed = false,
                            PositionId = 2,
                            SecurityStamp = "dccdb14f-5ef0-4219-a149-640ca769826f",
                            TwoFactorEnabled = false,
                            UserName = "YoussefIbrahim"
                        },
                        new
                        {
                            Id = "3",
                            AccessFailedCount = 0,
                            Address = "Cairo",
                            ConcurrencyStamp = "50a1cf50-a9c8-4d06-9faf-db658b4cee44",
                            Email = "Khaled333@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Khaled",
                            LastName = "Alaa",
                            LockoutEnabled = false,
                            PasswordHash = "EntaMalOmkTalet.1516",
                            PhoneNumber = "0118735194",
                            PhoneNumberConfirmed = false,
                            PositionId = 3,
                            SecurityStamp = "30e150cf-23e7-4dfb-926f-5b28d44935d7",
                            TwoFactorEnabled = false,
                            UserName = "KhaledAlaa"
                        },
                        new
                        {
                            Id = "4",
                            AccessFailedCount = 0,
                            Address = "New Capital",
                            ConcurrencyStamp = "d78f8a50-1f81-4588-8a07-01220b681135",
                            Email = "AnasMohamed784.com",
                            EmailConfirmed = false,
                            FirstName = "Anas",
                            LastName = "Mohamed",
                            LockoutEnabled = false,
                            PasswordHash = "EntaMalOmk4.1516",
                            PhoneNumber = "01249834561",
                            PhoneNumberConfirmed = false,
                            PositionId = 4,
                            SecurityStamp = "216e6456-8aa7-42ac-8838-ea3ec6ee5391",
                            TwoFactorEnabled = false,
                            UserName = "AnasMohamed"
                        },
                        new
                        {
                            Id = "5",
                            AccessFailedCount = 0,
                            Address = "Alex",
                            ConcurrencyStamp = "b84975c3-835d-43c4-ac49-ce241a1bdeab",
                            Email = "KhaledAhmed@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Khaled",
                            LastName = "Ahmed",
                            LockoutEnabled = false,
                            PasswordHash = "EntaMalOmk5.1516",
                            PhoneNumber = "01532943571",
                            PhoneNumberConfirmed = false,
                            PositionId = 5,
                            SecurityStamp = "6ad2f823-a05e-4db6-8ac5-90584fd74f16",
                            TwoFactorEnabled = false,
                            UserName = "KhaledAhmed"
                        },
                        new
                        {
                            Id = "6",
                            AccessFailedCount = 0,
                            Address = "Kafr Alsheikh",
                            ConcurrencyStamp = "5f231471-9e12-4219-a51a-105090990733",
                            Email = "Alaa841.com",
                            EmailConfirmed = false,
                            FirstName = "Alaa",
                            LastName = "Osama",
                            LockoutEnabled = false,
                            PasswordHash = "EntaMalOmkTany.1516",
                            PhoneNumber = "0107835641",
                            PhoneNumberConfirmed = false,
                            PositionId = 6,
                            SecurityStamp = "51f5a25d-8d69-47a6-b3d9-a5a5524ac325",
                            TwoFactorEnabled = false,
                            UserName = "AlaaOsama"
                        },
                        new
                        {
                            Id = "7",
                            AccessFailedCount = 0,
                            Address = "Alex",
                            ConcurrencyStamp = "1f40e8a0-7740-4474-8235-095c0adfae1a",
                            Email = "Admin1@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Admin",
                            LastName = "1",
                            LockoutEnabled = false,
                            NormalizedEmail = "ADMIN@GMAIL.COM",
                            NormalizedUserName = "ADMIN1",
                            PasswordHash = "AQAAAAEAACcQAAAAENRk/0rWj9s9DDgr3hBGlpYR1MG2yXRFRtxLnu3B8Oh4sNCuukNQ9+wp5e7KseC8eA==",
                            PhoneNumber = "01068873164",
                            PhoneNumberConfirmed = false,
                            PositionId = 7,
                            SecurityStamp = "19fe57fc-7322-4b4a-a8fd-d6d5392eda7d",
                            TwoFactorEnabled = false,
                            UserName = "Admin1"
                        });
                });

            modelBuilder.Entity("EmployeeManagementDatabase.Entities.Job", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DeadLine")
                        .HasColumnType("Date");

                    b.Property<string>("EmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("TaskDescription")
                        .IsRequired()
                        .HasColumnType("varchar(Max)");

                    b.Property<string>("TaskLink")
                        .HasColumnType("varchar(Max)");

                    b.Property<string>("TaskName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Job", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 6,
                            DeadLine = new DateTime(2025, 5, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = "4",
                            State = "Running",
                            TaskDescription = "Create Login Page For the Employee System",
                            TaskName = "LoginPage"
                        },
                        new
                        {
                            Id = 7,
                            DeadLine = new DateTime(2025, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = "5",
                            State = "Running",
                            TaskDescription = "Create Page that Hold Related Cars Photos",
                            TaskName = "Photo Package Page"
                        },
                        new
                        {
                            Id = 8,
                            DeadLine = new DateTime(2024, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = "4",
                            State = "Running",
                            TaskDescription = "Create Register Page For the Employee System",
                            TaskName = "Register Page"
                        },
                        new
                        {
                            Id = 9,
                            DeadLine = new DateTime(2025, 2, 2, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = "2",
                            State = "Running",
                            TaskDescription = "Create back-end Login Page For the Employee System",
                            TaskName = " Back-end Login Page"
                        },
                        new
                        {
                            Id = 10,
                            DeadLine = new DateTime(2025, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmployeeId = "1",
                            State = "Running",
                            TaskDescription = "Create Back-end Register Page For the Employee System",
                            TaskName = "Back-end Register Page"
                        });
                });

            modelBuilder.Entity("EmployeeManagementDatabase.Entities.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("FromEmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ReportBody")
                        .IsRequired()
                        .HasColumnType("Varchar(Max)")
                        .HasColumnName("Body");

                    b.Property<string>("ReportHeader")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("Varchar")
                        .HasColumnName("Header");

                    b.Property<string>("ReportType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("SendAt")
                        .HasColumnType("Date");

                    b.Property<int?>("TaskId")
                        .HasColumnType("int");

                    b.Property<string>("ToEmployeeId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("FromEmployeeId");

                    b.HasIndex("TaskId");

                    b.HasIndex("ToEmployeeId");

                    b.ToTable("Report", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FromEmployeeId = "7",
                            ReportBody = "Login Page has Been Completed",
                            ReportHeader = "Login Page",
                            ReportType = "DeliverTask",
                            SendAt = new DateTime(2024, 12, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ToEmployeeId = "3"
                        },
                        new
                        {
                            Id = 2,
                            FromEmployeeId = "7",
                            ReportBody = " Back-end Login Page has Been Completed",
                            ReportHeader = "Back-end Login Page",
                            ReportType = "DeliverTask",
                            SendAt = new DateTime(2024, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ToEmployeeId = "3"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Role", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "1",
                            Name = "Employee",
                            NormalizedName = "EMPLOYEE"
                        },
                        new
                        {
                            Id = "2",
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = "3",
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRole", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "7",
                            RoleId = "2"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("EmployeeManagementDB.Entities.EmployeeAttendance", b =>
                {
                    b.HasOne("EmployeeManagementDatabase.Entities.Employee", "Employee")
                        .WithMany("Attendances")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("EmployeeManagementDB.Entities.MailSeen", b =>
                {
                    b.HasOne("EmployeeManagementDatabase.Entities.Employee", "Employee")
                        .WithMany("MailSeen")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EmployeeManagementDatabase.Entities.Report", "Report")
                        .WithMany("MailSeen")
                        .HasForeignKey("MailId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Report");
                });

            modelBuilder.Entity("EmployeeManagementDB.Entities.NotificationSeen", b =>
                {
                    b.HasOne("EmployeeManagementDatabase.Entities.Employee", "Employee")
                        .WithMany("UserNotification")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("EmployeeManagementDB.Entities.Notification", "Notification")
                        .WithMany("UserNotification")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Employee");

                    b.Navigation("Notification");
                });

            modelBuilder.Entity("EmployeeManagementDB.Entities.Position", b =>
                {
                    b.HasOne("EmployeeManagementDatabase.Entities.Department", "Department")
                        .WithMany("Positions")
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Department");
                });

            modelBuilder.Entity("EmployeeManagementDB.Entities.Vacation", b =>
                {
                    b.HasOne("EmployeeManagementDatabase.Entities.Employee", "Employee")
                        .WithMany("Vacations")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("EmployeeManagementDatabase.Entities.Department", b =>
                {
                    b.HasOne("EmployeeManagementDatabase.Entities.Employee", "President")
                        .WithOne("Department")
                        .HasForeignKey("EmployeeManagementDatabase.Entities.Department", "DepartmentPresident")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("President");
                });

            modelBuilder.Entity("EmployeeManagementDatabase.Entities.Employee", b =>
                {
                    b.HasOne("EmployeeManagementDatabase.Entities.Employee", "Manager")
                        .WithMany("EmployeesOfManager")
                        .HasForeignKey("ManagerId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("EmployeeManagementDB.Entities.Position", "Position")
                        .WithMany("Employees")
                        .HasForeignKey("PositionId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Manager");

                    b.Navigation("Position");
                });

            modelBuilder.Entity("EmployeeManagementDatabase.Entities.Job", b =>
                {
                    b.HasOne("EmployeeManagementDatabase.Entities.Employee", "Employee")
                        .WithMany("Tasks")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("EmployeeManagementDatabase.Entities.Report", b =>
                {
                    b.HasOne("EmployeeManagementDatabase.Entities.Employee", "FromEmployee")
                        .WithMany("FromReports")
                        .HasForeignKey("FromEmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("EmployeeManagementDatabase.Entities.Job", "Job")
                        .WithMany("Reports")
                        .HasForeignKey("TaskId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("EmployeeManagementDatabase.Entities.Employee", "ToEmployee")
                        .WithMany("ToReports")
                        .HasForeignKey("ToEmployeeId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("FromEmployee");

                    b.Navigation("Job");

                    b.Navigation("ToEmployee");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("EmployeeManagementDatabase.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("EmployeeManagementDatabase.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EmployeeManagementDatabase.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("EmployeeManagementDatabase.Entities.Employee", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("EmployeeManagementDB.Entities.Notification", b =>
                {
                    b.Navigation("UserNotification");
                });

            modelBuilder.Entity("EmployeeManagementDB.Entities.Position", b =>
                {
                    b.Navigation("Employees");
                });

            modelBuilder.Entity("EmployeeManagementDatabase.Entities.Department", b =>
                {
                    b.Navigation("Positions");
                });

            modelBuilder.Entity("EmployeeManagementDatabase.Entities.Employee", b =>
                {
                    b.Navigation("Attendances");

                    b.Navigation("Department");

                    b.Navigation("EmployeesOfManager");

                    b.Navigation("FromReports");

                    b.Navigation("MailSeen");

                    b.Navigation("Tasks");

                    b.Navigation("ToReports");

                    b.Navigation("UserNotification");

                    b.Navigation("Vacations");
                });

            modelBuilder.Entity("EmployeeManagementDatabase.Entities.Job", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("EmployeeManagementDatabase.Entities.Report", b =>
                {
                    b.Navigation("MailSeen");
                });
#pragma warning restore 612, 618
        }
    }
}
